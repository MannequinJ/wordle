{"ast":null,"code":"var _jsxFileName = \"C:\\\\Files\\\\Course\\\\react-wordle-copy\\\\wordle-copy\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./index.css\";\nimport WORDS from \"./Constants/WORDS.js\";\nimport ACTIONS from \"./Constants/ACTIONS.js\";\nimport SPECIAL_CHARS from \"./Constants/SPECIAL_CHARS\";\nimport generateRandomNumber from \"./Functions/generateRandomNumber\";\nimport checkForSpecialChars from \"./Functions/checkForSpecialChars\";\nimport Board from \"./Components/Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.KEY_PRESS:\n      // const newChar = action.payload.toUpperCase();\n      const newChar = { ...state.currentChar,\n        id: nanoid(),\n        text: action.payload.toUpperCase()\n      };\n\n      if (state.currentWord.length < 5) {\n        return { ...state,\n          currentChar: newChar,\n          currentWord: [...state.currentWord, newChar]\n        };\n      } else {\n        return { ...state,\n          currentChar: { ...state.currentChar,\n            text: action.payload\n          }\n        };\n      }\n\n    case ACTIONS.DELETE_CHAR:\n      return { ...state,\n        currentWord: state.currentWord.slice(0, -1)\n      };\n\n    case ACTIONS.CONFIRM_WORD:\n      //////////////\n      if (state.currentWord.length === 5) {\n        const newCurrentWord = state.currentWord.map((char, i) => {\n          let status;\n\n          for (let k = 0; k < state.mysteryWord.length; k++) {\n            if (char.text !== state.mysteryWord[k] && i !== k) {\n              status = \"wrong-char\";\n            } else if (char.text === state.mysteryWord[k] && i !== k) {\n              status = \"wrong-spot\";\n              break;\n            } else if (char.text === state.mysteryWord[k] && i === k) {\n              status = \"correct-spot\";\n              break;\n            }\n          }\n\n          return { ...char,\n            status: status\n          };\n        });\n\n        if (newCurrentWord.every(char => char.status === \"correct-spot\")) {\n          console.log(123);\n        } // console.log();\n        ////////////////\n\n\n        return { ...state,\n          wordsArr: [...state.wordsArr, newCurrentWord],\n          currentWord: []\n        };\n      } else {\n        return { ...state,\n          errorMessage: \"Not enough letters\"\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default function App() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    mysteryWord: WORDS[generateRandomNumber(WORDS)].toUpperCase().split(\"\"),\n    wordsArr: [],\n    currentChar: {\n      id: nanoid(),\n      status: \"\",\n      text: \"\"\n    },\n    currentWord: [],\n    errorMessage: \"\"\n  });\n  useEffect(() => document.addEventListener(\"keydown\", e => {\n    const pressedKey = e.key.toUpperCase();\n    console.log(pressedKey);\n\n    if (pressedKey === \"BACKSPACE\") {\n      dispatch({\n        type: ACTIONS.DELETE_CHAR\n      });\n    } else if (pressedKey === \"ENTER\") {\n      dispatch({\n        type: ACTIONS.CONFIRM_WORD\n      });\n    } else if (pressedKey.length === 1 && !isFinite(pressedKey) && !checkForSpecialChars(pressedKey, SPECIAL_CHARS)) {\n      dispatch({\n        type: ACTIONS.KEY_PRESS,\n        payload: e.key\n      });\n    } else {\n      return;\n    }\n  }), []);\n  console.log(state);\n  console.log(WORDS);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        data: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"J8iUIP1x+QxeFAyYDaiujn1G/tc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Files/Course/react-wordle-copy/wordle-copy/src/App.js"],"names":["React","useEffect","useReducer","nanoid","WORDS","ACTIONS","SPECIAL_CHARS","generateRandomNumber","checkForSpecialChars","Board","reducer","state","action","type","KEY_PRESS","newChar","currentChar","id","text","payload","toUpperCase","currentWord","length","DELETE_CHAR","slice","CONFIRM_WORD","newCurrentWord","map","char","i","status","k","mysteryWord","every","console","log","wordsArr","errorMessage","App","dispatch","split","document","addEventListener","e","pressedKey","key","isFinite"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./index.css\";\nimport WORDS from \"./Constants/WORDS.js\";\nimport ACTIONS from \"./Constants/ACTIONS.js\";\nimport SPECIAL_CHARS from \"./Constants/SPECIAL_CHARS\";\nimport generateRandomNumber from \"./Functions/generateRandomNumber\";\nimport checkForSpecialChars from \"./Functions/checkForSpecialChars\";\nimport Board from \"./Components/Board\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.KEY_PRESS:\n      // const newChar = action.payload.toUpperCase();\n      const newChar = {\n        ...state.currentChar,\n        id: nanoid(),\n        text: action.payload.toUpperCase(),\n      };\n      if (state.currentWord.length < 5) {\n        return {\n          ...state,\n          currentChar: newChar,\n          currentWord: [...state.currentWord, newChar],\n        };\n      } else {\n        return {\n          ...state,\n          currentChar: { ...state.currentChar, text: action.payload },\n        };\n      }\n    case ACTIONS.DELETE_CHAR:\n      return {\n        ...state,\n        currentWord: state.currentWord.slice(0, -1),\n      };\n    case ACTIONS.CONFIRM_WORD:\n      //////////////\n      if (state.currentWord.length === 5) {\n        const newCurrentWord = state.currentWord.map((char, i) => {\n          let status;\n          for (let k = 0; k < state.mysteryWord.length; k++) {\n            if (char.text !== state.mysteryWord[k] && i !== k) {\n              status = \"wrong-char\";\n            } else if (char.text === state.mysteryWord[k] && i !== k) {\n              status = \"wrong-spot\";\n              break;\n            } else if (char.text === state.mysteryWord[k] && i === k) {\n              status = \"correct-spot\";\n              break;\n            }\n          }\n          return {\n            ...char,\n            status: status,\n          };\n        });\n        if (newCurrentWord.every((char) => char.status === \"correct-spot\")) {\n          console.log(123);\n        }\n        // console.log();\n        ////////////////\n        return {\n          ...state,\n          wordsArr: [...state.wordsArr, newCurrentWord],\n          currentWord: [],\n        };\n      } else {\n        return {\n          ...state,\n          errorMessage: \"Not enough letters\",\n        };\n      }\n    default:\n      return state;\n  }\n}\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, {\n    mysteryWord: WORDS[generateRandomNumber(WORDS)].toUpperCase().split(\"\"),\n    wordsArr: [],\n    currentChar: {\n      id: nanoid(),\n      status: \"\",\n      text: \"\",\n    },\n    currentWord: [],\n    errorMessage: \"\",\n  });\n  useEffect(\n    () =>\n      document.addEventListener(\"keydown\", (e) => {\n        const pressedKey = e.key.toUpperCase();\n        console.log(pressedKey);\n        if (pressedKey === \"BACKSPACE\") {\n          dispatch({ type: ACTIONS.DELETE_CHAR });\n        } else if (pressedKey === \"ENTER\") {\n          dispatch({ type: ACTIONS.CONFIRM_WORD });\n        } else if (\n          pressedKey.length === 1 &&\n          !isFinite(pressedKey) &&\n          !checkForSpecialChars(pressedKey, SPECIAL_CHARS)\n        ) {\n          dispatch({ type: ACTIONS.KEY_PRESS, payload: e.key });\n        } else {\n          return;\n        }\n      }),\n    []\n  );\n  console.log(state);\n  console.log(WORDS);\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Wordle</h1>\n      </div>\n      <div className=\"game\">\n        <Board data={state} />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}