{"ast":null,"code":"import ACTIONS from \"../Constants/ACTIONS\";\nimport { nanoid } from \"nanoid\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.KEY_PRESS:\n      //\n      // put currentWord by index of words arr\n      //\n      const newChar = { ...state.currentChar,\n        id: nanoid(),\n        text: action.payload.toUpperCase()\n      };\n      const currentWord = [...state.currentWord, newChar];\n      const wordsArr = [...state.wordsArr]; //\n\n      const currentWordFilled = [...currentWord].fill({\n        status: \"\",\n        id: \"\",\n        text: \"\"\n      }, currentWord.length, 5);\n      wordsArr.splice(state.currentRow, 1);\n\n      if (state.currentWord.length < 5) {\n        return { ...state,\n          currentChar: newChar,\n          currentWord: currentWord,\n          wordsArr: wordsArr\n        };\n      } else {\n        return { ...state,\n          currentChar: { ...state.currentChar,\n            text: action.payload\n          }\n        };\n      }\n\n    case ACTIONS.DELETE_CHAR:\n      return { ...state,\n        currentWord: state.currentWord.slice(0, -1)\n      };\n\n    case ACTIONS.CONFIRM_WORD:\n      //////////////\n      let message;\n\n      if (state.currentWord.length === 5 && state.wordsArr.length <= 6) {\n        const newCurrentWord = state.currentWord.map((char, i) => {\n          let status;\n\n          for (let k = 0; k < state.mysteryWord.length; k++) {\n            if (char.text === state.mysteryWord[k] && i === k) {\n              status = \"correct-spot\";\n              break;\n            } else if (char.text === state.mysteryWord[k] && i !== k) {\n              status = \"wrong-spot\"; // break;\n            }\n          }\n\n          status = !status ? \"wrong-char\" : status;\n          return { ...char,\n            status: status\n          };\n        });\n\n        if (newCurrentWord.every(char => char.status === \"correct-spot\")) {\n          console.log(123);\n          message = \"Good job!\";\n        } // console.log();\n        ////////////////\n\n\n        const indexOfWordsArr = state.wordsArr.findIndex(arr => arr[0].id === \"\");\n        const newWordsArr = [...state.wordsArr];\n        newWordsArr.splice(+indexOfWordsArr, 1, newCurrentWord); ////////////////\n\n        return { ...state,\n          wordsArr: newWordsArr,\n          currentWord: [],\n          message: message,\n          currentRow: state.currentRow + 1\n        };\n      } else {\n        return { ...state,\n          errorMessage: \"Not enough letters\"\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Files/Course/react-wordle-copy/wordle-copy/src/Functions/reducer.js"],"names":["ACTIONS","nanoid","reducer","state","action","type","KEY_PRESS","newChar","currentChar","id","text","payload","toUpperCase","currentWord","wordsArr","currentWordFilled","fill","status","length","splice","currentRow","DELETE_CHAR","slice","CONFIRM_WORD","message","newCurrentWord","map","char","i","k","mysteryWord","every","console","log","indexOfWordsArr","findIndex","arr","newWordsArr","errorMessage"],"mappings":"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","sourcesContent":["import ACTIONS from \"../Constants/ACTIONS\";\r\nimport { nanoid } from \"nanoid\";\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.KEY_PRESS:\r\n      //\r\n      // put currentWord by index of words arr\r\n      //\r\n      const newChar = {\r\n        ...state.currentChar,\r\n        id: nanoid(),\r\n        text: action.payload.toUpperCase(),\r\n      };\r\n      const currentWord = [...state.currentWord, newChar];\r\n      const wordsArr = [...state.wordsArr];\r\n      //\r\n      const currentWordFilled = [...currentWord].fill(\r\n        { status: \"\", id: \"\", text: \"\" },\r\n        currentWord.length,\r\n        5\r\n      );\r\n      wordsArr.splice(state.currentRow, 1);\r\n      if (state.currentWord.length < 5) {\r\n        return {\r\n          ...state,\r\n          currentChar: newChar,\r\n          currentWord: currentWord,\r\n          wordsArr: wordsArr,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          currentChar: { ...state.currentChar, text: action.payload },\r\n        };\r\n      }\r\n    case ACTIONS.DELETE_CHAR:\r\n      return {\r\n        ...state,\r\n        currentWord: state.currentWord.slice(0, -1),\r\n      };\r\n    case ACTIONS.CONFIRM_WORD:\r\n      //////////////\r\n      let message;\r\n      if (state.currentWord.length === 5 && state.wordsArr.length <= 6) {\r\n        const newCurrentWord = state.currentWord.map((char, i) => {\r\n          let status;\r\n          for (let k = 0; k < state.mysteryWord.length; k++) {\r\n            if (char.text === state.mysteryWord[k] && i === k) {\r\n              status = \"correct-spot\";\r\n              break;\r\n            } else if (char.text === state.mysteryWord[k] && i !== k) {\r\n              status = \"wrong-spot\";\r\n              // break;\r\n            }\r\n          }\r\n          status = !status ? \"wrong-char\" : status;\r\n          return {\r\n            ...char,\r\n            status: status,\r\n          };\r\n        });\r\n        if (newCurrentWord.every((char) => char.status === \"correct-spot\")) {\r\n          console.log(123);\r\n          message = \"Good job!\";\r\n        }\r\n        // console.log();\r\n        ////////////////\r\n        const indexOfWordsArr = state.wordsArr.findIndex(\r\n          (arr) => arr[0].id === \"\"\r\n        );\r\n        const newWordsArr = [...state.wordsArr];\r\n        newWordsArr.splice(+indexOfWordsArr, 1, newCurrentWord);\r\n        ////////////////\r\n        return {\r\n          ...state,\r\n          wordsArr: newWordsArr,\r\n          currentWord: [],\r\n          message: message,\r\n          currentRow: state.currentRow + 1,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          errorMessage: \"Not enough letters\",\r\n        };\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}