{"ast":null,"code":"var _jsxFileName = \"C:\\\\Files\\\\Course\\\\react-wordle-copy\\\\wordle-copy\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Board from \"./Components/Board\";\nimport \"./index.css\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction containsSpecialChars(str) {\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  return specialChars.test(str);\n}\n\nconst WORDS = [\"cigar\", \"rebut\", \"sissy\", \"humph\", \"awake\", \"blush\", \"focal\", \"evade\", \"naval\", \"serve\", \"heath\", \"dwarf\", \"model\", \"karma\", \"stink\", \"grade\", \"quiet\", \"bench\"];\nconst randomNumber = Math.floor(Math.random() * (WORDS.length + 1));\nconst ACTIONS = {\n  KEY_PRESS: \"key-press\",\n  DELETE_CHAR: \"delete-char\",\n  CONFIRM_WORD: \"confirm-word\"\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.KEY_PRESS:\n      // const newChar = action.payload.toUpperCase();\n      const newChar = { ...state.currentChar,\n        id: nanoid(),\n        text: action.payload.toUpperCase()\n      };\n\n      if (state.currentWord.length < 5) {\n        return { ...state,\n          currentChar: newChar,\n          currentWord: [...state.currentWord, newChar]\n        };\n      } else {\n        return { ...state,\n          currentChar: { ...state.currentChar,\n            text: action.payload\n          }\n        };\n      }\n\n    case ACTIONS.DELETE_CHAR:\n      return { ...state,\n        currentWord: state.currentWord.slice(0, -1)\n      };\n\n    case ACTIONS.CONFIRM_WORD:\n      //////////////\n      if (currentWord.length === 5) {\n        const newCurrentWord = currentWord.map((char, i) => {\n          let status;\n          mysteryWord.forEach((mwChar, ind) => {\n            if (char === mwChar && i === ind) {\n              status = \"correct-spot\";\n            }\n          });\n        }); ////////////////\n\n        return { ...state,\n          wordsArr: [...state.wordsArr, state.currentWord],\n          currentWord: []\n        };\n      } else {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default function App() {\n  _s();\n\n  const [state, dispatch] = React.useReducer(reducer, {\n    mysteryWord: WORDS[randomNumber].toUpperCase(),\n    wordsArr: [],\n    currentChar: {\n      id: nanoid(),\n      status: \"\",\n      text: \"\"\n    },\n    currentWord: []\n  });\n  useEffect(() => document.addEventListener(\"keydown\", e => {\n    const pressedKey = e.key.toUpperCase();\n    console.log(pressedKey);\n\n    if (pressedKey === \"BACKSPACE\") {\n      dispatch({\n        type: ACTIONS.DELETE_CHAR\n      });\n    } else if (pressedKey === \"ENTER\") {\n      dispatch({\n        type: ACTIONS.CONFIRM_WORD\n      });\n    } else if (pressedKey.length === 1 && !isFinite(pressedKey) && !containsSpecialChars(pressedKey)) {\n      dispatch({\n        type: ACTIONS.KEY_PRESS,\n        payload: e.key\n      });\n    } else {\n      return;\n    }\n  }), []);\n  console.log(state);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        data: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"X+bkXvlctwu8fF12PL2PLPFuNdU=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Files/Course/react-wordle-copy/wordle-copy/src/App.js"],"names":["React","useEffect","Board","nanoid","containsSpecialChars","str","specialChars","test","WORDS","randomNumber","Math","floor","random","length","ACTIONS","KEY_PRESS","DELETE_CHAR","CONFIRM_WORD","reducer","state","action","type","newChar","currentChar","id","text","payload","toUpperCase","currentWord","slice","newCurrentWord","map","char","i","status","mysteryWord","forEach","mwChar","ind","wordsArr","App","dispatch","useReducer","document","addEventListener","e","pressedKey","key","console","log","isFinite"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport Board from \"./Components/Board\";\nimport \"./index.css\";\nimport { nanoid } from \"nanoid\";\n\nfunction containsSpecialChars(str) {\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  return specialChars.test(str);\n}\nconst WORDS = [\n  \"cigar\",\n  \"rebut\",\n  \"sissy\",\n  \"humph\",\n  \"awake\",\n  \"blush\",\n  \"focal\",\n  \"evade\",\n  \"naval\",\n  \"serve\",\n  \"heath\",\n  \"dwarf\",\n  \"model\",\n  \"karma\",\n  \"stink\",\n  \"grade\",\n  \"quiet\",\n  \"bench\",\n];\nconst randomNumber = Math.floor(Math.random() * (WORDS.length + 1));\n\nconst ACTIONS = {\n  KEY_PRESS: \"key-press\",\n  DELETE_CHAR: \"delete-char\",\n  CONFIRM_WORD: \"confirm-word\",\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.KEY_PRESS:\n      // const newChar = action.payload.toUpperCase();\n      const newChar = {\n        ...state.currentChar,\n        id: nanoid(),\n        text: action.payload.toUpperCase(),\n      };\n      if (state.currentWord.length < 5) {\n        return {\n          ...state,\n          currentChar: newChar,\n          currentWord: [...state.currentWord, newChar],\n        };\n      } else {\n        return {\n          ...state,\n          currentChar: { ...state.currentChar, text: action.payload },\n        };\n      }\n    case ACTIONS.DELETE_CHAR:\n      return {\n        ...state,\n        currentWord: state.currentWord.slice(0, -1),\n      };\n    case ACTIONS.CONFIRM_WORD:\n      //////////////\n      if (currentWord.length === 5) {\n        const newCurrentWord = currentWord.map((char, i) => {\n          let status;\n          mysteryWord.forEach((mwChar, ind) => {\n            if (char === mwChar && i === ind) {\n              status = \"correct-spot\";\n            }\n          });\n        });\n        ////////////////\n        return {\n          ...state,\n          wordsArr: [...state.wordsArr, state.currentWord],\n          currentWord: [],\n        };\n      } else {\n        return state;\n      }\n    default:\n      return state;\n  }\n}\nexport default function App() {\n  const [state, dispatch] = React.useReducer(reducer, {\n    mysteryWord: WORDS[randomNumber].toUpperCase(),\n    wordsArr: [],\n    currentChar: {\n      id: nanoid(),\n      status: \"\",\n      text: \"\",\n    },\n    currentWord: [],\n  });\n  useEffect(\n    () =>\n      document.addEventListener(\"keydown\", (e) => {\n        const pressedKey = e.key.toUpperCase();\n        console.log(pressedKey);\n        if (pressedKey === \"BACKSPACE\") {\n          dispatch({ type: ACTIONS.DELETE_CHAR });\n        } else if (pressedKey === \"ENTER\") {\n          dispatch({ type: ACTIONS.CONFIRM_WORD });\n        } else if (\n          pressedKey.length === 1 &&\n          !isFinite(pressedKey) &&\n          !containsSpecialChars(pressedKey)\n        ) {\n          dispatch({ type: ACTIONS.KEY_PRESS, payload: e.key });\n        } else {\n          return;\n        }\n      }),\n    []\n  );\n  console.log(state);\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Wordle</h1>\n      </div>\n      <div className=\"game\">\n        <Board data={state} />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}