{"ast":null,"code":"var _jsxFileName = \"C:\\\\Files\\\\Course\\\\react-wordle-copy\\\\wordle-copy\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./index.css\";\nimport WORDS from \"./Constants/WORDS.js\";\nimport ACTIONS from \"./Constants/ACTIONS.js\";\nimport SPECIAL_CHARS from \"./Constants/SPECIAL_CHARS\";\nimport generateRandomNumber from \"./Functions/generateRandomNumber\";\nimport checkForSpecialChars from \"./Functions/checkForSpecialChars\";\nimport reducer from \"./Functions/reducer\";\nimport Board from \"./Components/Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    mysteryWord: mysteryWord,\n    wordsArr: [],\n    currentChar: {\n      id: nanoid(),\n      status: \"\",\n      text: \"\"\n    },\n    currentWord: [],\n    errorMessage: \"\"\n  });\n  useEffect(() => document.addEventListener(\"keydown\", e => {\n    const pressedKey = e.key.toUpperCase();\n    console.log(pressedKey);\n\n    if (pressedKey === \"BACKSPACE\") {\n      dispatch({\n        type: ACTIONS.DELETE_CHAR\n      });\n    } else if (pressedKey === \"ENTER\") {\n      dispatch({\n        type: ACTIONS.CONFIRM_WORD\n      });\n    } else if (pressedKey.length === 1 && !isFinite(pressedKey) && !checkForSpecialChars(pressedKey, SPECIAL_CHARS)) {\n      dispatch({\n        type: ACTIONS.KEY_PRESS,\n        payload: e.key\n      });\n    } else {\n      return;\n    }\n  }), []); // console.log(state);\n\n  console.log(mysteryWord);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        data: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"0pXXMWscw/BayElAUS/xd4Zkt+8=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Files/Course/react-wordle-copy/wordle-copy/src/App.js"],"names":["React","useEffect","useReducer","nanoid","WORDS","ACTIONS","SPECIAL_CHARS","generateRandomNumber","checkForSpecialChars","reducer","Board","App","state","dispatch","mysteryWord","wordsArr","currentChar","id","status","text","currentWord","errorMessage","document","addEventListener","e","pressedKey","key","toUpperCase","console","log","type","DELETE_CHAR","CONFIRM_WORD","length","isFinite","KEY_PRESS","payload"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACO,OAAD,EAAU;AAC5CK,IAAAA,WAAW,EAAEA,WAD+B;AAE5CC,IAAAA,QAAQ,EAAE,EAFkC;AAG5CC,IAAAA,WAAW,EAAE;AACXC,MAAAA,EAAE,EAAEd,MAAM,EADC;AAEXe,MAAAA,MAAM,EAAE,EAFG;AAGXC,MAAAA,IAAI,EAAE;AAHK,KAH+B;AAQ5CC,IAAAA,WAAW,EAAE,EAR+B;AAS5CC,IAAAA,YAAY,EAAE;AAT8B,GAAV,CAApC;AAWApB,EAAAA,SAAS,CACP,MACEqB,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAsCC,CAAD,IAAO;AAC1C,UAAMC,UAAU,GAAGD,CAAC,CAACE,GAAF,CAAMC,WAAN,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;;AACA,QAAIA,UAAU,KAAK,WAAnB,EAAgC;AAC9BZ,MAAAA,QAAQ,CAAC;AAAEiB,QAAAA,IAAI,EAAEzB,OAAO,CAAC0B;AAAhB,OAAD,CAAR;AACD,KAFD,MAEO,IAAIN,UAAU,KAAK,OAAnB,EAA4B;AACjCZ,MAAAA,QAAQ,CAAC;AAAEiB,QAAAA,IAAI,EAAEzB,OAAO,CAAC2B;AAAhB,OAAD,CAAR;AACD,KAFM,MAEA,IACLP,UAAU,CAACQ,MAAX,KAAsB,CAAtB,IACA,CAACC,QAAQ,CAACT,UAAD,CADT,IAEA,CAACjB,oBAAoB,CAACiB,UAAD,EAAanB,aAAb,CAHhB,EAIL;AACAO,MAAAA,QAAQ,CAAC;AAAEiB,QAAAA,IAAI,EAAEzB,OAAO,CAAC8B,SAAhB;AAA2BC,QAAAA,OAAO,EAAEZ,CAAC,CAACE;AAAtC,OAAD,CAAR;AACD,KANM,MAMA;AACL;AACD;AACF,GAhBD,CAFK,EAmBP,EAnBO,CAAT,CAZ4B,CAiC5B;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEF;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA7CuBD,G;;KAAAA,G","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./index.css\";\nimport WORDS from \"./Constants/WORDS.js\";\nimport ACTIONS from \"./Constants/ACTIONS.js\";\nimport SPECIAL_CHARS from \"./Constants/SPECIAL_CHARS\";\nimport generateRandomNumber from \"./Functions/generateRandomNumber\";\nimport checkForSpecialChars from \"./Functions/checkForSpecialChars\";\nimport reducer from \"./Functions/reducer\";\nimport Board from \"./Components/Board\";\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, {\n    mysteryWord: mysteryWord,\n    wordsArr: [],\n    currentChar: {\n      id: nanoid(),\n      status: \"\",\n      text: \"\",\n    },\n    currentWord: [],\n    errorMessage: \"\",\n  });\n  useEffect(\n    () =>\n      document.addEventListener(\"keydown\", (e) => {\n        const pressedKey = e.key.toUpperCase();\n        console.log(pressedKey);\n        if (pressedKey === \"BACKSPACE\") {\n          dispatch({ type: ACTIONS.DELETE_CHAR });\n        } else if (pressedKey === \"ENTER\") {\n          dispatch({ type: ACTIONS.CONFIRM_WORD });\n        } else if (\n          pressedKey.length === 1 &&\n          !isFinite(pressedKey) &&\n          !checkForSpecialChars(pressedKey, SPECIAL_CHARS)\n        ) {\n          dispatch({ type: ACTIONS.KEY_PRESS, payload: e.key });\n        } else {\n          return;\n        }\n      }),\n    []\n  );\n  // console.log(state);\n  console.log(mysteryWord);\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Wordle</h1>\n      </div>\n      <div className=\"game\">\n        <Board data={state} />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}