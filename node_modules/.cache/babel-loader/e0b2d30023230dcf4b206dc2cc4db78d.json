{"ast":null,"code":"import ACTIONS from \"../Constants/ACTIONS\";\nimport { nanoid } from \"nanoid\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.KEY_PRESS:\n      const newChar = { ...state.currentChar,\n        id: nanoid(),\n        text: action.payload.toUpperCase()\n      };\n\n      if (state.currentWord.length < 5) {\n        return { ...state,\n          currentChar: newChar,\n          currentWord: [...state.currentWord, newChar]\n        };\n      } else {\n        return { ...state,\n          currentChar: { ...state.currentChar,\n            text: action.payload\n          }\n        };\n      }\n\n    case ACTIONS.DELETE_CHAR:\n      return { ...state,\n        currentWord: state.currentWord.slice(0, -1)\n      };\n\n    case ACTIONS.CONFIRM_WORD:\n      //////////////\n      if (state.currentWord.length === 5) {\n        const newCurrentWord = state.currentWord.map((char, i) => {\n          let status;\n\n          for (let k = 0; k < state.mysteryWord.length; k++) {\n            if (char.text === state.mysteryWord[k] && i === k) {\n              status = \"correct-spot\";\n              break;\n            } else if (char.text === state.mysteryWord[k] && i !== k) {\n              status = \"wrong-spot\"; // break;\n            }\n          }\n\n          status = !status ? \"wrong-spot\" : status;\n          return { ...char,\n            status: status\n          };\n        });\n\n        if (newCurrentWord.every(char => char.status === \"correct-spot\")) {\n          console.log(123);\n        } // console.log();\n        ////////////////\n\n\n        return { ...state,\n          wordsArr: [...state.wordsArr, newCurrentWord],\n          currentWord: []\n        };\n      } else {\n        return { ...state,\n          errorMessage: \"Not enough letters\"\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer; // for (let k = 0; k < state.mysteryWord.length; k++) {\n//   if (char.text !== state.mysteryWord[k] && i !== k) {\n//     status = \"wrong-char\";\n//   } else if (char.text === state.mysteryWord[k] && i !== k) {\n//     status = \"wrong-spot\";\n//     // break;\n//   } else if (char.text === state.mysteryWord[k] && i === k) {\n//     status = \"correct-spot\";\n//     break;\n//   }\n// }","map":{"version":3,"sources":["C:/Files/Course/react-wordle-copy/wordle-copy/src/Functions/reducer.js"],"names":["ACTIONS","nanoid","reducer","state","action","type","KEY_PRESS","newChar","currentChar","id","text","payload","toUpperCase","currentWord","length","DELETE_CHAR","slice","CONFIRM_WORD","newCurrentWord","map","char","i","status","k","mysteryWord","every","console","log","wordsArr","errorMessage"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,OAAO,CAACM,SAAb;AACE,YAAMC,OAAO,GAAG,EACd,GAAGJ,KAAK,CAACK,WADK;AAEdC,QAAAA,EAAE,EAAER,MAAM,EAFI;AAGdS,QAAAA,IAAI,EAAEN,MAAM,CAACO,OAAP,CAAeC,WAAf;AAHQ,OAAhB;;AAKA,UAAIT,KAAK,CAACU,WAAN,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,eAAO,EACL,GAAGX,KADE;AAELK,UAAAA,WAAW,EAAED,OAFR;AAGLM,UAAAA,WAAW,EAAE,CAAC,GAAGV,KAAK,CAACU,WAAV,EAAuBN,OAAvB;AAHR,SAAP;AAKD,OAND,MAMO;AACL,eAAO,EACL,GAAGJ,KADE;AAELK,UAAAA,WAAW,EAAE,EAAE,GAAGL,KAAK,CAACK,WAAX;AAAwBE,YAAAA,IAAI,EAAEN,MAAM,CAACO;AAArC;AAFR,SAAP;AAID;;AACH,SAAKX,OAAO,CAACe,WAAb;AACE,aAAO,EACL,GAAGZ,KADE;AAELU,QAAAA,WAAW,EAAEV,KAAK,CAACU,WAAN,CAAkBG,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B;AAFR,OAAP;;AAIF,SAAKhB,OAAO,CAACiB,YAAb;AACE;AACA,UAAId,KAAK,CAACU,WAAN,CAAkBC,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,cAAMI,cAAc,GAAGf,KAAK,CAACU,WAAN,CAAkBM,GAAlB,CAAsB,CAACC,IAAD,EAAOC,CAAP,KAAa;AACxD,cAAIC,MAAJ;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,KAAK,CAACqB,WAAN,CAAkBV,MAAtC,EAA8CS,CAAC,EAA/C,EAAmD;AACjD,gBAAIH,IAAI,CAACV,IAAL,KAAcP,KAAK,CAACqB,WAAN,CAAkBD,CAAlB,CAAd,IAAsCF,CAAC,KAAKE,CAAhD,EAAmD;AACjDD,cAAAA,MAAM,GAAG,cAAT;AACA;AACD,aAHD,MAGO,IAAIF,IAAI,CAACV,IAAL,KAAcP,KAAK,CAACqB,WAAN,CAAkBD,CAAlB,CAAd,IAAsCF,CAAC,KAAKE,CAAhD,EAAmD;AACxDD,cAAAA,MAAM,GAAG,YAAT,CADwD,CAExD;AACD;AACF;;AACDA,UAAAA,MAAM,GAAG,CAACA,MAAD,GAAU,YAAV,GAAyBA,MAAlC;AACA,iBAAO,EACL,GAAGF,IADE;AAELE,YAAAA,MAAM,EAAEA;AAFH,WAAP;AAID,SAhBsB,CAAvB;;AAiBA,YAAIJ,cAAc,CAACO,KAAf,CAAsBL,IAAD,IAAUA,IAAI,CAACE,MAAL,KAAgB,cAA/C,CAAJ,EAAoE;AAClEI,UAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACD,SApBiC,CAqBlC;AACA;;;AACA,eAAO,EACL,GAAGxB,KADE;AAELyB,UAAAA,QAAQ,EAAE,CAAC,GAAGzB,KAAK,CAACyB,QAAV,EAAoBV,cAApB,CAFL;AAGLL,UAAAA,WAAW,EAAE;AAHR,SAAP;AAKD,OA5BD,MA4BO;AACL,eAAO,EACL,GAAGV,KADE;AAEL0B,UAAAA,YAAY,EAAE;AAFT,SAAP;AAID;;AACH;AACE,aAAO1B,KAAP;AA7DJ;AA+DD,CAhED;;AAiEA,eAAeD,OAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import ACTIONS from \"../Constants/ACTIONS\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.KEY_PRESS:\r\n      const newChar = {\r\n        ...state.currentChar,\r\n        id: nanoid(),\r\n        text: action.payload.toUpperCase(),\r\n      };\r\n      if (state.currentWord.length < 5) {\r\n        return {\r\n          ...state,\r\n          currentChar: newChar,\r\n          currentWord: [...state.currentWord, newChar],\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          currentChar: { ...state.currentChar, text: action.payload },\r\n        };\r\n      }\r\n    case ACTIONS.DELETE_CHAR:\r\n      return {\r\n        ...state,\r\n        currentWord: state.currentWord.slice(0, -1),\r\n      };\r\n    case ACTIONS.CONFIRM_WORD:\r\n      //////////////\r\n      if (state.currentWord.length === 5) {\r\n        const newCurrentWord = state.currentWord.map((char, i) => {\r\n          let status;\r\n          for (let k = 0; k < state.mysteryWord.length; k++) {\r\n            if (char.text === state.mysteryWord[k] && i === k) {\r\n              status = \"correct-spot\";\r\n              break;\r\n            } else if (char.text === state.mysteryWord[k] && i !== k) {\r\n              status = \"wrong-spot\";\r\n              // break;\r\n            }\r\n          }\r\n          status = !status ? \"wrong-spot\" : status;\r\n          return {\r\n            ...char,\r\n            status: status,\r\n          };\r\n        });\r\n        if (newCurrentWord.every((char) => char.status === \"correct-spot\")) {\r\n          console.log(123);\r\n        }\r\n        // console.log();\r\n        ////////////////\r\n        return {\r\n          ...state,\r\n          wordsArr: [...state.wordsArr, newCurrentWord],\r\n          currentWord: [],\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          errorMessage: \"Not enough letters\",\r\n        };\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n\r\n// for (let k = 0; k < state.mysteryWord.length; k++) {\r\n//   if (char.text !== state.mysteryWord[k] && i !== k) {\r\n//     status = \"wrong-char\";\r\n//   } else if (char.text === state.mysteryWord[k] && i !== k) {\r\n//     status = \"wrong-spot\";\r\n//     // break;\r\n//   } else if (char.text === state.mysteryWord[k] && i === k) {\r\n//     status = \"correct-spot\";\r\n//     break;\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}