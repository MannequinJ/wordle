{"ast":null,"code":"import ACTIONS from \"../Constants/ACTIONS\";\nimport { nanoid } from \"nanoid\";\nimport EMPTY_CHAR from \"../Constants/EMPTY_CHAR\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.KEY_PRESS:\n      const currentChar = {\n        id: nanoid(),\n        text: action.payload.toUpperCase(),\n        status: \"\"\n      };\n      const currentWord = [...state.currentWord, currentChar];\n      const currentWordsArr = [...state.wordsArr];\n      const currentWordFilled = [...currentWord];\n\n      for (let i = currentWord.length; i < 5; i++) {\n        currentWordFilled.push(EMPTY_CHAR);\n      }\n\n      currentWordsArr.splice(state.currentRow, 1, currentWordFilled);\n\n      if (state.currentWord.length < 5) {\n        return { ...state,\n          currentWord: currentWord,\n          wordsArr: currentWordsArr,\n          currentCharIndex: state.currentCharIndex + 1\n        };\n      } else {\n        return state;\n      }\n\n    case ACTIONS.DELETE_CHAR:\n      // const currentWord = [...state.currentWord];\n      const currentWordsArrDel = [...state.wordsArr];\n      const currentWordDel = [...currentWordsArrDel[state.currentRow]];\n      currentWordDel.splice(state.currentCharIndex, 1, EMPTY_CHAR);\n      console.log(currentCharIndex);\n      currentWordsArrDel.splice(state.currentRow, 1, currentWordDel);\n      return { ...state,\n        currentWord: state.currentWord.slice(0, -1),\n        wordsArr: currentWordsArrDel\n      };\n\n    case ACTIONS.CONFIRM_WORD:\n      //////////////\n      let message;\n\n      if (state.currentWord.length === 5 && state.wordsArr.length <= 6) {\n        const newCurrentWord = state.currentWord.map((char, i) => {\n          let status;\n\n          for (let k = 0; k < state.mysteryWord.length; k++) {\n            if (char.text === state.mysteryWord[k] && i === k) {\n              status = \"correct-spot\";\n              break;\n            } else if (char.text === state.mysteryWord[k] && i !== k) {\n              status = \"wrong-spot\"; // break;\n            }\n          }\n\n          status = !status ? \"wrong-char\" : status;\n          return { ...char,\n            status: status\n          };\n        });\n\n        if (newCurrentWord.every(char => char.status === \"correct-spot\")) {\n          console.log(123);\n          message = \"Good job!\";\n        } // console.log();\n        ////////////////\n\n\n        const indexOfWordsArr = state.wordsArr.findIndex(arr => arr[0].id === \"\");\n        const newWordsArr = [...state.wordsArr];\n        newWordsArr.splice(+indexOfWordsArr, 1, newCurrentWord); ////////////////\n\n        return { ...state,\n          wordsArr: newWordsArr,\n          currentWord: [],\n          message: message,\n          currentRow: state.currentRow + 1\n        };\n      } else {\n        return { ...state,\n          errorMessage: \"Not enough letters\"\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Files/Course/react-wordle-copy/wordle-copy/src/Functions/reducer.js"],"names":["ACTIONS","nanoid","EMPTY_CHAR","reducer","state","action","type","KEY_PRESS","currentChar","id","text","payload","toUpperCase","status","currentWord","currentWordsArr","wordsArr","currentWordFilled","i","length","push","splice","currentRow","currentCharIndex","DELETE_CHAR","currentWordsArrDel","currentWordDel","console","log","slice","CONFIRM_WORD","message","newCurrentWord","map","char","k","mysteryWord","every","indexOfWordsArr","findIndex","arr","newWordsArr","errorMessage"],"mappings":"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","sourcesContent":["import ACTIONS from \"../Constants/ACTIONS\";\r\nimport { nanoid } from \"nanoid\";\r\nimport EMPTY_CHAR from \"../Constants/EMPTY_CHAR\";\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.KEY_PRESS:\r\n      const currentChar = {\r\n        id: nanoid(),\r\n        text: action.payload.toUpperCase(),\r\n        status: \"\",\r\n      };\r\n      const currentWord = [...state.currentWord, currentChar];\r\n      const currentWordsArr = [...state.wordsArr];\r\n      const currentWordFilled = [...currentWord];\r\n      for (let i = currentWord.length; i < 5; i++) {\r\n        currentWordFilled.push(EMPTY_CHAR);\r\n      }\r\n      currentWordsArr.splice(state.currentRow, 1, currentWordFilled);\r\n      if (state.currentWord.length < 5) {\r\n        return {\r\n          ...state,\r\n          currentWord: currentWord,\r\n          wordsArr: currentWordsArr,\r\n          currentCharIndex: state.currentCharIndex + 1,\r\n        };\r\n      } else {\r\n        return state;\r\n      }\r\n    case ACTIONS.DELETE_CHAR:\r\n      // const currentWord = [...state.currentWord];\r\n      const currentWordsArrDel = [...state.wordsArr];\r\n      const currentWordDel = [...currentWordsArrDel[state.currentRow]];\r\n      currentWordDel.splice(state.currentCharIndex, 1, EMPTY_CHAR);\r\n      console.log(currentCharIndex);\r\n      currentWordsArrDel.splice(state.currentRow, 1, currentWordDel);\r\n      return {\r\n        ...state,\r\n        currentWord: state.currentWord.slice(0, -1),\r\n        wordsArr: currentWordsArrDel,\r\n      };\r\n    case ACTIONS.CONFIRM_WORD:\r\n      //////////////\r\n      let message;\r\n      if (state.currentWord.length === 5 && state.wordsArr.length <= 6) {\r\n        const newCurrentWord = state.currentWord.map((char, i) => {\r\n          let status;\r\n          for (let k = 0; k < state.mysteryWord.length; k++) {\r\n            if (char.text === state.mysteryWord[k] && i === k) {\r\n              status = \"correct-spot\";\r\n              break;\r\n            } else if (char.text === state.mysteryWord[k] && i !== k) {\r\n              status = \"wrong-spot\";\r\n              // break;\r\n            }\r\n          }\r\n          status = !status ? \"wrong-char\" : status;\r\n          return {\r\n            ...char,\r\n            status: status,\r\n          };\r\n        });\r\n        if (newCurrentWord.every((char) => char.status === \"correct-spot\")) {\r\n          console.log(123);\r\n          message = \"Good job!\";\r\n        }\r\n        // console.log();\r\n        ////////////////\r\n        const indexOfWordsArr = state.wordsArr.findIndex(\r\n          (arr) => arr[0].id === \"\"\r\n        );\r\n        const newWordsArr = [...state.wordsArr];\r\n        newWordsArr.splice(+indexOfWordsArr, 1, newCurrentWord);\r\n        ////////////////\r\n        return {\r\n          ...state,\r\n          wordsArr: newWordsArr,\r\n          currentWord: [],\r\n          message: message,\r\n          currentRow: state.currentRow + 1,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          errorMessage: \"Not enough letters\",\r\n        };\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}