{"ast":null,"code":"var _jsxFileName = \"C:\\\\Files\\\\Course\\\\react-wordle-copy\\\\wordle-copy\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./index.css\";\nimport WORDS from \"./Constants/WORDS.js\";\nimport ACTIONS from \"./Constants/ACTIONS.js\";\nimport SPECIAL_CHARS from \"./Constants/SPECIAL_CHARS\";\nimport generateRandomNumber from \"./Functions/generateRandomNumber\";\nimport checkForSpecialChars from \"./Functions/checkForSpecialChars\";\nimport reducer from \"./Functions/reducer\";\nimport Board from \"./Components/Board\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mysteryWord = WORDS[generateRandomNumber(WORDS.length)].toUpperCase().split(\"\"); // function reducer(state, action) {\n//   switch (action.type) {\n//     case ACTIONS.KEY_PRESS:\n//       // const newChar = action.payload.toUpperCase();\n//       const newChar = {\n//         ...state.currentChar,\n//         id: nanoid(),\n//         text: action.payload.toUpperCase(),\n//       };\n//       if (state.currentWord.length < 5) {\n//         return {\n//           ...state,\n//           currentChar: newChar,\n//           currentWord: [...state.currentWord, newChar],\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           currentChar: { ...state.currentChar, text: action.payload },\n//         };\n//       }\n//     case ACTIONS.DELETE_CHAR:\n//       return {\n//         ...state,\n//         currentWord: state.currentWord.slice(0, -1),\n//       };\n//     case ACTIONS.CONFIRM_WORD:\n//       //////////////\n//       if (state.currentWord.length === 5) {\n//         const newCurrentWord = state.currentWord.map((char, i) => {\n//           let status;\n//           for (let k = 0; k < state.mysteryWord.length; k++) {\n//             if (char.text !== state.mysteryWord[k] && i !== k) {\n//               status = \"wrong-char\";\n//             } else if (char.text === state.mysteryWord[k] && i !== k) {\n//               status = \"wrong-spot\";\n//               break;\n//             } else if (char.text === state.mysteryWord[k] && i === k) {\n//               status = \"correct-spot\";\n//               break;\n//             }\n//           }\n//           return {\n//             ...char,\n//             status: status,\n//           };\n//         });\n//         if (newCurrentWord.every((char) => char.status === \"correct-spot\")) {\n//           console.log(123);\n//         }\n//         // console.log();\n//         ////////////////\n//         return {\n//           ...state,\n//           wordsArr: [...state.wordsArr, newCurrentWord],\n//           currentWord: [],\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           errorMessage: \"Not enough letters\",\n//         };\n//       }\n//     default:\n//       return state;\n//   }\n// }\n\nexport default function App() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    mysteryWord: mysteryWord,\n    wordsArr: [],\n    currentChar: {\n      id: nanoid(),\n      status: \"\",\n      text: \"\"\n    },\n    currentWord: [],\n    errorMessage: \"\"\n  });\n  useEffect(() => document.addEventListener(\"keydown\", e => {\n    const pressedKey = e.key.toUpperCase();\n    console.log(pressedKey);\n\n    if (pressedKey === \"BACKSPACE\") {\n      dispatch({\n        type: ACTIONS.DELETE_CHAR\n      });\n    } else if (pressedKey === \"ENTER\") {\n      dispatch({\n        type: ACTIONS.CONFIRM_WORD\n      });\n    } else if (pressedKey.length === 1 && !isFinite(pressedKey) && !checkForSpecialChars(pressedKey, SPECIAL_CHARS)) {\n      dispatch({\n        type: ACTIONS.KEY_PRESS,\n        payload: e.key\n      });\n    } else {\n      return;\n    }\n  }), []); // console.log(state);\n  // console.log();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        data: state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"0pXXMWscw/BayElAUS/xd4Zkt+8=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Files/Course/react-wordle-copy/wordle-copy/src/App.js"],"names":["React","useEffect","useReducer","nanoid","WORDS","ACTIONS","SPECIAL_CHARS","generateRandomNumber","checkForSpecialChars","reducer","Board","mysteryWord","length","toUpperCase","split","App","state","dispatch","wordsArr","currentChar","id","status","text","currentWord","errorMessage","document","addEventListener","e","pressedKey","key","console","log","type","DELETE_CHAR","CONFIRM_WORD","isFinite","KEY_PRESS","payload"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,WAAW,GAAGP,KAAK,CAACG,oBAAoB,CAACH,KAAK,CAACQ,MAAP,CAArB,CAAL,CACjBC,WADiB,GAEjBC,KAFiB,CAEX,EAFW,CAApB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,UAAU,CAACO,OAAD,EAAU;AAC5CE,IAAAA,WAAW,EAAEA,WAD+B;AAE5CO,IAAAA,QAAQ,EAAE,EAFkC;AAG5CC,IAAAA,WAAW,EAAE;AACXC,MAAAA,EAAE,EAAEjB,MAAM,EADC;AAEXkB,MAAAA,MAAM,EAAE,EAFG;AAGXC,MAAAA,IAAI,EAAE;AAHK,KAH+B;AAQ5CC,IAAAA,WAAW,EAAE,EAR+B;AAS5CC,IAAAA,YAAY,EAAE;AAT8B,GAAV,CAApC;AAWAvB,EAAAA,SAAS,CACP,MACEwB,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAsCC,CAAD,IAAO;AAC1C,UAAMC,UAAU,GAAGD,CAAC,CAACE,GAAF,CAAMhB,WAAN,EAAnB;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;;AACA,QAAIA,UAAU,KAAK,WAAnB,EAAgC;AAC9BX,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAE3B,OAAO,CAAC4B;AAAhB,OAAD,CAAR;AACD,KAFD,MAEO,IAAIL,UAAU,KAAK,OAAnB,EAA4B;AACjCX,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAE3B,OAAO,CAAC6B;AAAhB,OAAD,CAAR;AACD,KAFM,MAEA,IACLN,UAAU,CAAChB,MAAX,KAAsB,CAAtB,IACA,CAACuB,QAAQ,CAACP,UAAD,CADT,IAEA,CAACpB,oBAAoB,CAACoB,UAAD,EAAatB,aAAb,CAHhB,EAIL;AACAW,MAAAA,QAAQ,CAAC;AAAEe,QAAAA,IAAI,EAAE3B,OAAO,CAAC+B,SAAhB;AAA2BC,QAAAA,OAAO,EAAEV,CAAC,CAACE;AAAtC,OAAD,CAAR;AACD,KANM,MAMA;AACL;AACD;AACF,GAhBD,CAFK,EAmBP,EAnBO,CAAT,CAZ4B,CAiC5B;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEb;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA7CuBD,G;;KAAAA,G","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport \"./index.css\";\nimport WORDS from \"./Constants/WORDS.js\";\nimport ACTIONS from \"./Constants/ACTIONS.js\";\nimport SPECIAL_CHARS from \"./Constants/SPECIAL_CHARS\";\nimport generateRandomNumber from \"./Functions/generateRandomNumber\";\nimport checkForSpecialChars from \"./Functions/checkForSpecialChars\";\nimport reducer from \"./Functions/reducer\";\nimport Board from \"./Components/Board\";\n\nconst mysteryWord = WORDS[generateRandomNumber(WORDS.length)]\n  .toUpperCase()\n  .split(\"\");\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case ACTIONS.KEY_PRESS:\n//       // const newChar = action.payload.toUpperCase();\n//       const newChar = {\n//         ...state.currentChar,\n//         id: nanoid(),\n//         text: action.payload.toUpperCase(),\n//       };\n//       if (state.currentWord.length < 5) {\n//         return {\n//           ...state,\n//           currentChar: newChar,\n//           currentWord: [...state.currentWord, newChar],\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           currentChar: { ...state.currentChar, text: action.payload },\n//         };\n//       }\n//     case ACTIONS.DELETE_CHAR:\n//       return {\n//         ...state,\n//         currentWord: state.currentWord.slice(0, -1),\n//       };\n//     case ACTIONS.CONFIRM_WORD:\n//       //////////////\n//       if (state.currentWord.length === 5) {\n//         const newCurrentWord = state.currentWord.map((char, i) => {\n//           let status;\n//           for (let k = 0; k < state.mysteryWord.length; k++) {\n//             if (char.text !== state.mysteryWord[k] && i !== k) {\n//               status = \"wrong-char\";\n//             } else if (char.text === state.mysteryWord[k] && i !== k) {\n//               status = \"wrong-spot\";\n//               break;\n//             } else if (char.text === state.mysteryWord[k] && i === k) {\n//               status = \"correct-spot\";\n//               break;\n//             }\n//           }\n//           return {\n//             ...char,\n//             status: status,\n//           };\n//         });\n//         if (newCurrentWord.every((char) => char.status === \"correct-spot\")) {\n//           console.log(123);\n//         }\n//         // console.log();\n//         ////////////////\n//         return {\n//           ...state,\n//           wordsArr: [...state.wordsArr, newCurrentWord],\n//           currentWord: [],\n//         };\n//       } else {\n//         return {\n//           ...state,\n//           errorMessage: \"Not enough letters\",\n//         };\n//       }\n//     default:\n//       return state;\n//   }\n// }\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, {\n    mysteryWord: mysteryWord,\n    wordsArr: [],\n    currentChar: {\n      id: nanoid(),\n      status: \"\",\n      text: \"\",\n    },\n    currentWord: [],\n    errorMessage: \"\",\n  });\n  useEffect(\n    () =>\n      document.addEventListener(\"keydown\", (e) => {\n        const pressedKey = e.key.toUpperCase();\n        console.log(pressedKey);\n        if (pressedKey === \"BACKSPACE\") {\n          dispatch({ type: ACTIONS.DELETE_CHAR });\n        } else if (pressedKey === \"ENTER\") {\n          dispatch({ type: ACTIONS.CONFIRM_WORD });\n        } else if (\n          pressedKey.length === 1 &&\n          !isFinite(pressedKey) &&\n          !checkForSpecialChars(pressedKey, SPECIAL_CHARS)\n        ) {\n          dispatch({ type: ACTIONS.KEY_PRESS, payload: e.key });\n        } else {\n          return;\n        }\n      }),\n    []\n  );\n  // console.log(state);\n  // console.log();\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Wordle</h1>\n      </div>\n      <div className=\"game\">\n        <Board data={state} />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}