{"ast":null,"code":"import ACTIONS from \"../Constants/ACTIONS\";\nimport { nanoid } from \"nanoid\";\nimport EMPTY_CHAR from \"../Constants/EMPTY_CHAR\";\nimport EMPTY_WORDS_ARR from \"../Constants/EMPTY_WORDS_ARR\";\nimport charCounter from \"./charCounter\";\nimport WORDS from \"../Constants/WORDS\";\nimport generateMysteryWord from \"./generateMysteryWord\";\n\nconst reducer = (state, action) => {\n  let currentWord;\n  let currentWordsArr;\n  let currentWordFilled;\n  let message;\n  let gameStatus = false;\n\n  switch (action.type) {\n    case ACTIONS.KEY_PRESS:\n      if (!state.gameIsWon || !state.gameIsLost) {\n        const currentChar = {\n          id: nanoid(),\n          text: action.payload.toUpperCase(),\n          status: \"\"\n        };\n        currentWord = [...state.currentWord, currentChar];\n        currentWordsArr = [...state.wordsArr];\n        currentWordFilled = [...currentWord];\n\n        for (let i = currentWord.length; i < 5; i++) {\n          currentWordFilled.push(EMPTY_CHAR);\n        }\n\n        currentWordsArr.splice(state.currentRow, 1, currentWordFilled);\n\n        if (state.currentWord.length < 5 && state.currentRow < 6) {\n          return { ...state,\n            currentWord: currentWord,\n            wordsArr: currentWordsArr,\n            message: \"\",\n            currentCharIndex: state.currentCharIndex + 1\n          };\n        } else {\n          return state;\n        }\n      } else {\n        return { ...state\n        };\n      }\n\n    case ACTIONS.DELETE_CHAR:\n      // const currentWord = [...state.currentWord];\n      // console.log(state.currentCharIndex);\n      currentWordsArr = [...state.wordsArr];\n      currentWord = [...currentWordsArr[state.currentRow]];\n      currentWord.splice(state.currentCharIndex, 1, EMPTY_CHAR);\n      currentWordsArr.splice(state.currentRow, 1, currentWord);\n      return { ...state,\n        currentWord: state.currentWord.slice(0, -1),\n        wordsArr: currentWordsArr,\n        currentCharIndex: state.currentCharIndex - 1\n      };\n\n    case ACTIONS.CONFIRM_WORD:\n      const mysteryWordCharsNumber = charCounter(state.mysteryWord.join(\"\"));\n\n      if (state.currentWord.length === 5) {\n        //  && state.currentRow < 6\n        const newCurrentWord = state.currentWord.map((char, i) => {\n          let charStatus;\n\n          for (let k = 0; k < state.mysteryWord.length; k++) {\n            if (char.text === state.mysteryWord[k] && i === k) {\n              mysteryWordCharsNumber[char.text] -= 1;\n              charStatus = \"correct-spot\";\n              break;\n            } else if (char.text === state.mysteryWord[k] && i !== k && mysteryWordCharsNumber[char.text]) {\n              charStatus = \"wrong-spot\";\n              mysteryWordCharsNumber[char.text] -= 1; // break;\n            }\n          }\n\n          charStatus = !charStatus ? \"wrong-char\" : charStatus;\n          return { ...char,\n            status: charStatus\n          };\n        });\n\n        if (newCurrentWord.every(char => char.status === \"correct-spot\")) {\n          gameStatus = true;\n          message = \"Good job!\";\n        } else if (state.currentRow === 6) {\n          gameStatus = true;\n          message = state.mysteryWord.join(\"\");\n          console.log(message);\n        } ////////////////\n\n\n        const newWordsArr = [...state.wordsArr];\n        newWordsArr.splice(state.currentRow, 1, newCurrentWord); ////////////////\n\n        return { ...state,\n          wordsArr: newWordsArr,\n          currentWord: [],\n          message: message,\n          currentCharIndex: -1,\n          currentRow: state.currentRow + 1,\n          gameIsWon: gameStatus\n        };\n      } else {\n        return { ...state,\n          message: \"Not enough letters\"\n        };\n      }\n\n    case ACTIONS.START_NEW_GAME:\n      return { ...state,\n        wordsArr: EMPTY_WORDS_ARR,\n        mysteryWord: generateMysteryWord(WORDS),\n        currentWord: [],\n        currentCharIndex: -1,\n        currentRow: 0,\n        message: \"\",\n        gameIsEnded: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Files/Course/react-wordle-copy/wordle-copy/src/Functions/reducer.js"],"names":["ACTIONS","nanoid","EMPTY_CHAR","EMPTY_WORDS_ARR","charCounter","WORDS","generateMysteryWord","reducer","state","action","currentWord","currentWordsArr","currentWordFilled","message","gameStatus","type","KEY_PRESS","gameIsWon","gameIsLost","currentChar","id","text","payload","toUpperCase","status","wordsArr","i","length","push","splice","currentRow","currentCharIndex","DELETE_CHAR","slice","CONFIRM_WORD","mysteryWordCharsNumber","mysteryWord","join","newCurrentWord","map","char","charStatus","k","every","console","log","newWordsArr","START_NEW_GAME","gameIsEnded"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,MAAIC,WAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,iBAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,UAAU,GAAG,KAAjB;;AACA,UAAQL,MAAM,CAACM,IAAf;AACE,SAAKf,OAAO,CAACgB,SAAb;AACE,UAAI,CAACR,KAAK,CAACS,SAAP,IAAoB,CAACT,KAAK,CAACU,UAA/B,EAA2C;AACzC,cAAMC,WAAW,GAAG;AAClBC,UAAAA,EAAE,EAAEnB,MAAM,EADQ;AAElBoB,UAAAA,IAAI,EAAEZ,MAAM,CAACa,OAAP,CAAeC,WAAf,EAFY;AAGlBC,UAAAA,MAAM,EAAE;AAHU,SAApB;AAKAd,QAAAA,WAAW,GAAG,CAAC,GAAGF,KAAK,CAACE,WAAV,EAAuBS,WAAvB,CAAd;AACAR,QAAAA,eAAe,GAAG,CAAC,GAAGH,KAAK,CAACiB,QAAV,CAAlB;AACAb,QAAAA,iBAAiB,GAAG,CAAC,GAAGF,WAAJ,CAApB;;AACA,aAAK,IAAIgB,CAAC,GAAGhB,WAAW,CAACiB,MAAzB,EAAiCD,CAAC,GAAG,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3Cd,UAAAA,iBAAiB,CAACgB,IAAlB,CAAuB1B,UAAvB;AACD;;AACDS,QAAAA,eAAe,CAACkB,MAAhB,CAAuBrB,KAAK,CAACsB,UAA7B,EAAyC,CAAzC,EAA4ClB,iBAA5C;;AACA,YAAIJ,KAAK,CAACE,WAAN,CAAkBiB,MAAlB,GAA2B,CAA3B,IAAgCnB,KAAK,CAACsB,UAAN,GAAmB,CAAvD,EAA0D;AACxD,iBAAO,EACL,GAAGtB,KADE;AAELE,YAAAA,WAAW,EAAEA,WAFR;AAGLe,YAAAA,QAAQ,EAAEd,eAHL;AAILE,YAAAA,OAAO,EAAE,EAJJ;AAKLkB,YAAAA,gBAAgB,EAAEvB,KAAK,CAACuB,gBAAN,GAAyB;AALtC,WAAP;AAOD,SARD,MAQO;AACL,iBAAOvB,KAAP;AACD;AACF,OAxBD,MAwBO;AACL,eAAO,EACL,GAAGA;AADE,SAAP;AAGD;;AACH,SAAKR,OAAO,CAACgC,WAAb;AACE;AACA;AACArB,MAAAA,eAAe,GAAG,CAAC,GAAGH,KAAK,CAACiB,QAAV,CAAlB;AACAf,MAAAA,WAAW,GAAG,CAAC,GAAGC,eAAe,CAACH,KAAK,CAACsB,UAAP,CAAnB,CAAd;AACApB,MAAAA,WAAW,CAACmB,MAAZ,CAAmBrB,KAAK,CAACuB,gBAAzB,EAA2C,CAA3C,EAA8C7B,UAA9C;AACAS,MAAAA,eAAe,CAACkB,MAAhB,CAAuBrB,KAAK,CAACsB,UAA7B,EAAyC,CAAzC,EAA4CpB,WAA5C;AACA,aAAO,EACL,GAAGF,KADE;AAELE,QAAAA,WAAW,EAAEF,KAAK,CAACE,WAAN,CAAkBuB,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B,CAFR;AAGLR,QAAAA,QAAQ,EAAEd,eAHL;AAILoB,QAAAA,gBAAgB,EAAEvB,KAAK,CAACuB,gBAAN,GAAyB;AAJtC,OAAP;;AAMF,SAAK/B,OAAO,CAACkC,YAAb;AACE,YAAMC,sBAAsB,GAAG/B,WAAW,CAACI,KAAK,CAAC4B,WAAN,CAAkBC,IAAlB,CAAuB,EAAvB,CAAD,CAA1C;;AACA,UAAI7B,KAAK,CAACE,WAAN,CAAkBiB,MAAlB,KAA6B,CAAjC,EAAoC;AAClC;AACA,cAAMW,cAAc,GAAG9B,KAAK,CAACE,WAAN,CAAkB6B,GAAlB,CAAsB,CAACC,IAAD,EAAOd,CAAP,KAAa;AACxD,cAAIe,UAAJ;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlC,KAAK,CAAC4B,WAAN,CAAkBT,MAAtC,EAA8Ce,CAAC,EAA/C,EAAmD;AACjD,gBAAIF,IAAI,CAACnB,IAAL,KAAcb,KAAK,CAAC4B,WAAN,CAAkBM,CAAlB,CAAd,IAAsChB,CAAC,KAAKgB,CAAhD,EAAmD;AACjDP,cAAAA,sBAAsB,CAACK,IAAI,CAACnB,IAAN,CAAtB,IAAqC,CAArC;AACAoB,cAAAA,UAAU,GAAG,cAAb;AACA;AACD,aAJD,MAIO,IACLD,IAAI,CAACnB,IAAL,KAAcb,KAAK,CAAC4B,WAAN,CAAkBM,CAAlB,CAAd,IACAhB,CAAC,KAAKgB,CADN,IAEAP,sBAAsB,CAACK,IAAI,CAACnB,IAAN,CAHjB,EAIL;AACAoB,cAAAA,UAAU,GAAG,YAAb;AACAN,cAAAA,sBAAsB,CAACK,IAAI,CAACnB,IAAN,CAAtB,IAAqC,CAArC,CAFA,CAGA;AACD;AACF;;AACDoB,UAAAA,UAAU,GAAG,CAACA,UAAD,GAAc,YAAd,GAA6BA,UAA1C;AACA,iBAAO,EACL,GAAGD,IADE;AAELhB,YAAAA,MAAM,EAAEiB;AAFH,WAAP;AAID,SAtBsB,CAAvB;;AAuBA,YAAIH,cAAc,CAACK,KAAf,CAAsBH,IAAD,IAAUA,IAAI,CAAChB,MAAL,KAAgB,cAA/C,CAAJ,EAAoE;AAClEV,UAAAA,UAAU,GAAG,IAAb;AACAD,UAAAA,OAAO,GAAG,WAAV;AACD,SAHD,MAGO,IAAIL,KAAK,CAACsB,UAAN,KAAqB,CAAzB,EAA4B;AACjChB,UAAAA,UAAU,GAAG,IAAb;AACAD,UAAAA,OAAO,GAAGL,KAAK,CAAC4B,WAAN,CAAkBC,IAAlB,CAAuB,EAAvB,CAAV;AACAO,UAAAA,OAAO,CAACC,GAAR,CAAYhC,OAAZ;AACD,SAhCiC,CAiClC;;;AACA,cAAMiC,WAAW,GAAG,CAAC,GAAGtC,KAAK,CAACiB,QAAV,CAApB;AACAqB,QAAAA,WAAW,CAACjB,MAAZ,CAAmBrB,KAAK,CAACsB,UAAzB,EAAqC,CAArC,EAAwCQ,cAAxC,EAnCkC,CAoClC;;AACA,eAAO,EACL,GAAG9B,KADE;AAELiB,UAAAA,QAAQ,EAAEqB,WAFL;AAGLpC,UAAAA,WAAW,EAAE,EAHR;AAILG,UAAAA,OAAO,EAAEA,OAJJ;AAKLkB,UAAAA,gBAAgB,EAAE,CAAC,CALd;AAMLD,UAAAA,UAAU,EAAEtB,KAAK,CAACsB,UAAN,GAAmB,CAN1B;AAOLb,UAAAA,SAAS,EAAEH;AAPN,SAAP;AASD,OA9CD,MA8CO;AACL,eAAO,EACL,GAAGN,KADE;AAELK,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID;;AACH,SAAKb,OAAO,CAAC+C,cAAb;AACE,aAAO,EACL,GAAGvC,KADE;AAELiB,QAAAA,QAAQ,EAAEtB,eAFL;AAGLiC,QAAAA,WAAW,EAAE9B,mBAAmB,CAACD,KAAD,CAH3B;AAILK,QAAAA,WAAW,EAAE,EAJR;AAKLqB,QAAAA,gBAAgB,EAAE,CAAC,CALd;AAMLD,QAAAA,UAAU,EAAE,CANP;AAOLjB,QAAAA,OAAO,EAAE,EAPJ;AAQLmC,QAAAA,WAAW,EAAE;AARR,OAAP;;AAUF;AACE,aAAOxC,KAAP;AA9GJ;AAgHD,CAtHD;;AAuHA,eAAeD,OAAf","sourcesContent":["import ACTIONS from \"../Constants/ACTIONS\";\r\nimport { nanoid } from \"nanoid\";\r\nimport EMPTY_CHAR from \"../Constants/EMPTY_CHAR\";\r\nimport EMPTY_WORDS_ARR from \"../Constants/EMPTY_WORDS_ARR\";\r\nimport charCounter from \"./charCounter\";\r\nimport WORDS from \"../Constants/WORDS\";\r\nimport generateMysteryWord from \"./generateMysteryWord\";\r\nconst reducer = (state, action) => {\r\n  let currentWord;\r\n  let currentWordsArr;\r\n  let currentWordFilled;\r\n  let message;\r\n  let gameStatus = false;\r\n  switch (action.type) {\r\n    case ACTIONS.KEY_PRESS:\r\n      if (!state.gameIsWon || !state.gameIsLost) {\r\n        const currentChar = {\r\n          id: nanoid(),\r\n          text: action.payload.toUpperCase(),\r\n          status: \"\",\r\n        };\r\n        currentWord = [...state.currentWord, currentChar];\r\n        currentWordsArr = [...state.wordsArr];\r\n        currentWordFilled = [...currentWord];\r\n        for (let i = currentWord.length; i < 5; i++) {\r\n          currentWordFilled.push(EMPTY_CHAR);\r\n        }\r\n        currentWordsArr.splice(state.currentRow, 1, currentWordFilled);\r\n        if (state.currentWord.length < 5 && state.currentRow < 6) {\r\n          return {\r\n            ...state,\r\n            currentWord: currentWord,\r\n            wordsArr: currentWordsArr,\r\n            message: \"\",\r\n            currentCharIndex: state.currentCharIndex + 1,\r\n          };\r\n        } else {\r\n          return state;\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n    case ACTIONS.DELETE_CHAR:\r\n      // const currentWord = [...state.currentWord];\r\n      // console.log(state.currentCharIndex);\r\n      currentWordsArr = [...state.wordsArr];\r\n      currentWord = [...currentWordsArr[state.currentRow]];\r\n      currentWord.splice(state.currentCharIndex, 1, EMPTY_CHAR);\r\n      currentWordsArr.splice(state.currentRow, 1, currentWord);\r\n      return {\r\n        ...state,\r\n        currentWord: state.currentWord.slice(0, -1),\r\n        wordsArr: currentWordsArr,\r\n        currentCharIndex: state.currentCharIndex - 1,\r\n      };\r\n    case ACTIONS.CONFIRM_WORD:\r\n      const mysteryWordCharsNumber = charCounter(state.mysteryWord.join(\"\"));\r\n      if (state.currentWord.length === 5) {\r\n        //  && state.currentRow < 6\r\n        const newCurrentWord = state.currentWord.map((char, i) => {\r\n          let charStatus;\r\n          for (let k = 0; k < state.mysteryWord.length; k++) {\r\n            if (char.text === state.mysteryWord[k] && i === k) {\r\n              mysteryWordCharsNumber[char.text] -= 1;\r\n              charStatus = \"correct-spot\";\r\n              break;\r\n            } else if (\r\n              char.text === state.mysteryWord[k] &&\r\n              i !== k &&\r\n              mysteryWordCharsNumber[char.text]\r\n            ) {\r\n              charStatus = \"wrong-spot\";\r\n              mysteryWordCharsNumber[char.text] -= 1;\r\n              // break;\r\n            }\r\n          }\r\n          charStatus = !charStatus ? \"wrong-char\" : charStatus;\r\n          return {\r\n            ...char,\r\n            status: charStatus,\r\n          };\r\n        });\r\n        if (newCurrentWord.every((char) => char.status === \"correct-spot\")) {\r\n          gameStatus = true;\r\n          message = \"Good job!\";\r\n        } else if (state.currentRow === 6) {\r\n          gameStatus = true;\r\n          message = state.mysteryWord.join(\"\");\r\n          console.log(message);\r\n        }\r\n        ////////////////\r\n        const newWordsArr = [...state.wordsArr];\r\n        newWordsArr.splice(state.currentRow, 1, newCurrentWord);\r\n        ////////////////\r\n        return {\r\n          ...state,\r\n          wordsArr: newWordsArr,\r\n          currentWord: [],\r\n          message: message,\r\n          currentCharIndex: -1,\r\n          currentRow: state.currentRow + 1,\r\n          gameIsWon: gameStatus,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          message: \"Not enough letters\",\r\n        };\r\n      }\r\n    case ACTIONS.START_NEW_GAME:\r\n      return {\r\n        ...state,\r\n        wordsArr: EMPTY_WORDS_ARR,\r\n        mysteryWord: generateMysteryWord(WORDS),\r\n        currentWord: [],\r\n        currentCharIndex: -1,\r\n        currentRow: 0,\r\n        message: \"\",\r\n        gameIsEnded: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}