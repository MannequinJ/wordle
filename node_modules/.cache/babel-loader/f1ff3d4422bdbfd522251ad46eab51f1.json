{"ast":null,"code":"import ACTIONS from \"../Constants/ACTIONS\";\nimport { nanoid } from \"nanoid\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ACTIONS.KEY_PRESS:\n      //\n      // state.wordsArr.forEach((arr) => {\n      //   console.log(arr[0].id);\n      // });\n      console.log(state.wordsArr.findIndex(arr => arr[0].id === \"\")); //\n\n      const newChar = { ...state.currentChar,\n        id: nanoid(),\n        text: action.payload.toUpperCase()\n      };\n\n      if (state.currentWord.length < 5) {\n        return { ...state,\n          currentChar: newChar,\n          currentWord: [...state.currentWord, newChar]\n        };\n      } else {\n        return { ...state,\n          currentChar: { ...state.currentChar,\n            text: action.payload\n          }\n        };\n      }\n\n    case ACTIONS.DELETE_CHAR:\n      return { ...state,\n        currentWord: state.currentWord.slice(0, -1)\n      };\n\n    case ACTIONS.CONFIRM_WORD:\n      //////////////\n      let message;\n\n      if (state.currentWord.length === 5) {\n        const newCurrentWord = state.currentWord.map((char, i) => {\n          let status;\n\n          for (let k = 0; k < state.mysteryWord.length; k++) {\n            if (char.text === state.mysteryWord[k] && i === k) {\n              status = \"correct-spot\";\n              break;\n            } else if (char.text === state.mysteryWord[k] && i !== k) {\n              status = \"wrong-spot\"; // break;\n            }\n          }\n\n          status = !status ? \"wrong-char\" : status;\n          return { ...char,\n            status: status\n          };\n        });\n\n        if (newCurrentWord.every(char => char.status === \"correct-spot\")) {\n          console.log(123);\n          message = \"Good job!\";\n        } // console.log();\n        ////////////////\n\n\n        return { ...state,\n          wordsArr: [...state.wordsArr, newCurrentWord],\n          currentWord: [],\n          message: message\n        };\n      } else {\n        return { ...state,\n          errorMessage: \"Not enough letters\"\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Files/Course/react-wordle-copy/wordle-copy/src/Functions/reducer.js"],"names":["ACTIONS","nanoid","reducer","state","action","type","KEY_PRESS","console","log","wordsArr","findIndex","arr","id","newChar","currentChar","text","payload","toUpperCase","currentWord","length","DELETE_CHAR","slice","CONFIRM_WORD","message","newCurrentWord","map","char","i","status","k","mysteryWord","every","errorMessage"],"mappings":"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","sourcesContent":["import ACTIONS from \"../Constants/ACTIONS\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ACTIONS.KEY_PRESS:\r\n      //\r\n      // state.wordsArr.forEach((arr) => {\r\n      //   console.log(arr[0].id);\r\n      // });\r\n      console.log(state.wordsArr.findIndex((arr) => arr[0].id === \"\"));\r\n      //\r\n      const newChar = {\r\n        ...state.currentChar,\r\n        id: nanoid(),\r\n        text: action.payload.toUpperCase(),\r\n      };\r\n      if (state.currentWord.length < 5) {\r\n        return {\r\n          ...state,\r\n          currentChar: newChar,\r\n          currentWord: [...state.currentWord, newChar],\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          currentChar: { ...state.currentChar, text: action.payload },\r\n        };\r\n      }\r\n    case ACTIONS.DELETE_CHAR:\r\n      return {\r\n        ...state,\r\n        currentWord: state.currentWord.slice(0, -1),\r\n      };\r\n    case ACTIONS.CONFIRM_WORD:\r\n      //////////////\r\n      let message;\r\n      if (state.currentWord.length === 5) {\r\n        const newCurrentWord = state.currentWord.map((char, i) => {\r\n          let status;\r\n          for (let k = 0; k < state.mysteryWord.length; k++) {\r\n            if (char.text === state.mysteryWord[k] && i === k) {\r\n              status = \"correct-spot\";\r\n              break;\r\n            } else if (char.text === state.mysteryWord[k] && i !== k) {\r\n              status = \"wrong-spot\";\r\n              // break;\r\n            }\r\n          }\r\n          status = !status ? \"wrong-char\" : status;\r\n          return {\r\n            ...char,\r\n            status: status,\r\n          };\r\n        });\r\n        if (newCurrentWord.every((char) => char.status === \"correct-spot\")) {\r\n          console.log(123);\r\n          message = \"Good job!\";\r\n        }\r\n        // console.log();\r\n        ////////////////\r\n        return {\r\n          ...state,\r\n          wordsArr: [...state.wordsArr, newCurrentWord],\r\n          currentWord: [],\r\n          message: message,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          errorMessage: \"Not enough letters\",\r\n        };\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}