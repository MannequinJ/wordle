{"ast":null,"code":"import _objectSpread from\"C:/Files/Course/react-wordle-copy/wordle-copy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"C:/Files/Course/react-wordle-copy/wordle-copy/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import ACTIONS from\"../Constants/ACTIONS\";import{nanoid}from\"nanoid\";import EMPTY_CHAR from\"../Constants/EMPTY_CHAR\";import EMPTY_WORDS_ARR from\"../Constants/EMPTY_WORDS_ARR\";import charCounter from\"./charCounter\";import WORDS from\"../Constants/WORDS\";import generateMysteryWord from\"./generateMysteryWord\";var reducer=function reducer(state,action){var currentWord;var currentWordsArr;var currentWordFilled;var message;var gameStatus;switch(action.type){case ACTIONS.KEY_PRESS:if(!state.gameIsEnded){var currentChar={id:nanoid(),text:action.payload.toUpperCase(),status:\"\"};currentWord=[].concat(_toConsumableArray(state.currentWord),[currentChar]);currentWordsArr=_toConsumableArray(state.wordsArr);currentWordFilled=_toConsumableArray(currentWord);for(var i=currentWord.length;i<5;i++){currentWordFilled.push(EMPTY_CHAR);}currentWordsArr.splice(state.currentRow,1,currentWordFilled);if(state.currentWord.length<5&&state.currentRow<6){return _objectSpread(_objectSpread({},state),{},{currentWord:currentWord,wordsArr:currentWordsArr,message:\"\",currentCharIndex:state.currentCharIndex+1});}else{return state;}}else{return _objectSpread({},state);}case ACTIONS.DELETE_CHAR:if(!state.gameIsEnded){currentWordsArr=_toConsumableArray(state.wordsArr);currentWord=_toConsumableArray(currentWordsArr[state.currentRow]);currentWord.splice(state.currentCharIndex,1,EMPTY_CHAR);currentWordsArr.splice(state.currentRow,1,currentWord);return _objectSpread(_objectSpread({},state),{},{currentWord:state.currentWord.slice(0,-1),wordsArr:currentWordsArr,currentCharIndex:state.currentCharIndex-1});}else{return _objectSpread({},state);}case ACTIONS.CONFIRM_WORD:if(!state.gameIsEnded){var mysteryWordCharsNumber=charCounter(state.mysteryWord.join(\"\"));if(state.currentWord.length===5){//  && state.currentRow < 6\nvar newCurrentWord=state.currentWord.map(function(char,i){var charStatus;for(var k=0;k<state.mysteryWord.length;k++){if(char.text===state.mysteryWord[k]&&i===k){mysteryWordCharsNumber[char.text]-=1;charStatus=\"correct-spot\";break;}else if(char.text===state.mysteryWord[k]&&i!==k&&mysteryWordCharsNumber[char.text]){charStatus=\"wrong-spot\";mysteryWordCharsNumber[char.text]-=1;// break;\n}}charStatus=!charStatus?\"wrong-char\":charStatus;return _objectSpread(_objectSpread({},char),{},{status:charStatus});});var newWordsArr=_toConsumableArray(state.wordsArr);newWordsArr.splice(state.currentRow,1,newCurrentWord);////////////////\nif(state.currentRow===5&&!newCurrentWord.every(function(char){return char.status===\"correct-spot\";})){gameStatus=true;message=state.mysteryWord.join(\"\");}if(newCurrentWord.every(function(char){return char.status===\"correct-spot\";})){gameStatus=true;message=\"Good job!\";}// console.log(message);\n////////////////\nreturn _objectSpread(_objectSpread({},state),{},{wordsArr:newWordsArr,currentWord:[],message:message,currentCharIndex:-1,currentRow:state.currentRow+1,gameIsEnded:gameStatus});}else{return _objectSpread(_objectSpread({},state),{},{message:\"Not enough letters\"});}}else{return _objectSpread({},state);}case ACTIONS.START_NEW_GAME:return _objectSpread(_objectSpread({},state),{},{wordsArr:EMPTY_WORDS_ARR,mysteryWord:generateMysteryWord(WORDS),currentWord:[],currentCharIndex:-1,currentRow:0,message:\"\",gameIsEnded:false});default:return state;}};export default reducer;","map":{"version":3,"sources":["C:/Files/Course/react-wordle-copy/wordle-copy/src/Functions/reducer.js"],"names":["ACTIONS","nanoid","EMPTY_CHAR","EMPTY_WORDS_ARR","charCounter","WORDS","generateMysteryWord","reducer","state","action","currentWord","currentWordsArr","currentWordFilled","message","gameStatus","type","KEY_PRESS","gameIsEnded","currentChar","id","text","payload","toUpperCase","status","wordsArr","i","length","push","splice","currentRow","currentCharIndex","DELETE_CHAR","slice","CONFIRM_WORD","mysteryWordCharsNumber","mysteryWord","join","newCurrentWord","map","char","charStatus","k","newWordsArr","every","START_NEW_GAME"],"mappings":"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","sourcesContent":["import ACTIONS from \"../Constants/ACTIONS\";\r\nimport { nanoid } from \"nanoid\";\r\nimport EMPTY_CHAR from \"../Constants/EMPTY_CHAR\";\r\nimport EMPTY_WORDS_ARR from \"../Constants/EMPTY_WORDS_ARR\";\r\nimport charCounter from \"./charCounter\";\r\nimport WORDS from \"../Constants/WORDS\";\r\nimport generateMysteryWord from \"./generateMysteryWord\";\r\nconst reducer = (state, action) => {\r\n  let currentWord;\r\n  let currentWordsArr;\r\n  let currentWordFilled;\r\n  let message;\r\n  let gameStatus;\r\n  switch (action.type) {\r\n    case ACTIONS.KEY_PRESS:\r\n      if (!state.gameIsEnded) {\r\n        const currentChar = {\r\n          id: nanoid(),\r\n          text: action.payload.toUpperCase(),\r\n          status: \"\",\r\n        };\r\n        currentWord = [...state.currentWord, currentChar];\r\n        currentWordsArr = [...state.wordsArr];\r\n        currentWordFilled = [...currentWord];\r\n        for (let i = currentWord.length; i < 5; i++) {\r\n          currentWordFilled.push(EMPTY_CHAR);\r\n        }\r\n        currentWordsArr.splice(state.currentRow, 1, currentWordFilled);\r\n        if (state.currentWord.length < 5 && state.currentRow < 6) {\r\n          return {\r\n            ...state,\r\n            currentWord: currentWord,\r\n            wordsArr: currentWordsArr,\r\n            message: \"\",\r\n            currentCharIndex: state.currentCharIndex + 1,\r\n          };\r\n        } else {\r\n          return state;\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n    case ACTIONS.DELETE_CHAR:\r\n      if (!state.gameIsEnded) {\r\n        currentWordsArr = [...state.wordsArr];\r\n        currentWord = [...currentWordsArr[state.currentRow]];\r\n        currentWord.splice(state.currentCharIndex, 1, EMPTY_CHAR);\r\n        currentWordsArr.splice(state.currentRow, 1, currentWord);\r\n        return {\r\n          ...state,\r\n          currentWord: state.currentWord.slice(0, -1),\r\n          wordsArr: currentWordsArr,\r\n          currentCharIndex: state.currentCharIndex - 1,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n    case ACTIONS.CONFIRM_WORD:\r\n      if (!state.gameIsEnded) {\r\n        const mysteryWordCharsNumber = charCounter(state.mysteryWord.join(\"\"));\r\n        if (state.currentWord.length === 5) {\r\n          //  && state.currentRow < 6\r\n          const newCurrentWord = state.currentWord.map((char, i) => {\r\n            let charStatus;\r\n            for (let k = 0; k < state.mysteryWord.length; k++) {\r\n              if (char.text === state.mysteryWord[k] && i === k) {\r\n                mysteryWordCharsNumber[char.text] -= 1;\r\n                charStatus = \"correct-spot\";\r\n                break;\r\n              } else if (\r\n                char.text === state.mysteryWord[k] &&\r\n                i !== k &&\r\n                mysteryWordCharsNumber[char.text]\r\n              ) {\r\n                charStatus = \"wrong-spot\";\r\n                mysteryWordCharsNumber[char.text] -= 1;\r\n                // break;\r\n              }\r\n            }\r\n            charStatus = !charStatus ? \"wrong-char\" : charStatus;\r\n            return {\r\n              ...char,\r\n              status: charStatus,\r\n            };\r\n          });\r\n          const newWordsArr = [...state.wordsArr];\r\n          newWordsArr.splice(state.currentRow, 1, newCurrentWord);\r\n          ////////////////\r\n          if (\r\n            state.currentRow === 5 &&\r\n            !newCurrentWord.every((char) => char.status === \"correct-spot\")\r\n          ) {\r\n            gameStatus = true;\r\n            message = state.mysteryWord.join(\"\");\r\n          }\r\n          if (newCurrentWord.every((char) => char.status === \"correct-spot\")) {\r\n            gameStatus = true;\r\n            message = \"Good job!\";\r\n          }\r\n\r\n          // console.log(message);\r\n          ////////////////\r\n          return {\r\n            ...state,\r\n            wordsArr: newWordsArr,\r\n            currentWord: [],\r\n            message: message,\r\n            currentCharIndex: -1,\r\n            currentRow: state.currentRow + 1,\r\n            gameIsEnded: gameStatus,\r\n          };\r\n        } else {\r\n          return {\r\n            ...state,\r\n            message: \"Not enough letters\",\r\n          };\r\n        }\r\n      } else {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n    case ACTIONS.START_NEW_GAME:\r\n      return {\r\n        ...state,\r\n        wordsArr: EMPTY_WORDS_ARR,\r\n        mysteryWord: generateMysteryWord(WORDS),\r\n        currentWord: [],\r\n        currentCharIndex: -1,\r\n        currentRow: 0,\r\n        message: \"\",\r\n        gameIsEnded: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}